AWSTemplateFormatVersion: "2010-09-09"
Description: VPC Configuration

Metadata: #파라미터들의 그룹들을 Label 작업
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcCIDR
          - PubCIDR1
          - PubCIDR2
          - PriCIDR1
          - PriCIDR2

      - 
        Label: 
          default: "Amazon EC2 Configuration"
        Parameters: 
          - InstanceType
          - KeyName
          - AMI
          
Mappings:
  Regionmap:  
    ap-northeast-2:
      Linux2: ami-0f2c95e9fe3f8f80e
      window: ami-0685efd12a23690f5
      
    
          
Parameters:   
  EnvironmentName: #변수값으로 저장하여 리소스들의 공통된 네임 지정
    Description: A common name for your resources
    Type: String 

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PubCIDR1:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24
  PubCIDR2:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.4.0/24

  PriCIDR1:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.32.0/24
  PriCIDR2:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.64.0/24
  


  InstanceType: #인스턴스 타입
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
  
 
  AMI:
    Description: AMI of EC2
    Type: String
    Default: Linux2
    AllowedValues:
      - Linux2
      - window

  KeyName: #자신의 리전의 있는 keypair 사용하도록 지정
    Description: Name of KeyPair
    Type: AWS::EC2::KeyPair::KeyName
    
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.


Resources:
########### VPC ####################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC #변수값으로 저장된 이름호출

############### igw #####################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} igw

  Attachigw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

          
########### Subnet #################
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref PubCIDR1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs ]
      CidrBlock: !Ref PubCIDR2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref PriCIDR1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs ]
      CidrBlock: !Ref PriCIDR2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet2
################ EIP NAT  ##############
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: Attachigw
    Properties:
      Domain: vpc    

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NAT
############ Routing Table ##############

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} PublicRT

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: Attachigw
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
   
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} PrivateRT

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2     
############### secuirty ################# 
  sshsecurity:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow ssh
      GroupName: !Sub ${EnvironmentName} ssh-security
      VpcId:
        !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
     
  websecurity:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow http and ssh
      GroupName: !Sub ${EnvironmentName} web-security
      VpcId:
        !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref sshsecurity

  DBaccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow webserver
      GroupName: !Sub ${EnvironmentName}DBSG
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: TCP
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref websecurity

     
############# instnace #####################
#   bastion:
#     Type: AWS::EC2::Instance
#     Properties:
#       InstanceType: !Ref InstanceType
#       ImageId: !FindInMap [Regionmap, !Ref 'AWS::Region', Linux2] #위의 Mappings 데이터에서 Regionmap에 대한 속성값 추출 그중 AMI 참조 AWS::Region참조시 자동으로 사용리전 적용
#       KeyName: !Ref KeyName
#       SecurityGroupIds: 
#       - !Ref sshsecurity
#       SubnetId: !Ref PublicSubnet1
#       Tags:
#       - 
#         Key: Name
#         Value: bastion
  
# #GetAtt옵션을 통해서 해당 서브넷의 az속성값을 추출가능
# #사실 서브넷의 az가 지정되어 있어 az를 별도로 지정해주지 않아도 되긴한다.
#   webserver:
#     Type: AWS::EC2::Instance
#     Properties:
#       ImageId: !FindInMap [Regionmap, !Ref 'AWS::Region', Linux2]
#       KeyName: !Ref KeyName
#       AvailabilityZone: !GetAtt PublicSubnet1.AvailabilityZone
#       InstanceType: t2.micro
#       SubnetId: !Ref PrivateSubnet1
#       SecurityGroupIds:
#         - !Ref websecurity
#       UserData:
#         Fn::Base64:
#           !Join [ "", [
#           "#!/bin/bash\n",
#           "#Install APM for Web Server\n",
#           "yum install -y mariadb* php httpd php-mysql\n",
#           "systemctl enable httpd mariadb\n",
#           "systemctl start httpd mariadb\n"] ]
#       Tags:
#       - 
#         Key: Name
#         Value: Web Server
  

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet2
